{
  "contractName": "IApplication",
  "sourceName": "contracts/dapp/IApplication.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "claim",
          "type": "bytes32"
        }
      ],
      "name": "ClaimNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOutputHashesSiblingsArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "output",
          "type": "bytes"
        }
      ],
      "name": "OutputNotExecutable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "output",
          "type": "bytes"
        }
      ],
      "name": "OutputNotReexecutable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IConsensus",
          "name": "newConsensus",
          "type": "address"
        }
      ],
      "name": "NewConsensus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "outputIndex",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "output",
          "type": "bytes"
        }
      ],
      "name": "OutputExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "output",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "outputIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32[]",
              "name": "outputHashesSiblings",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct OutputValidityProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "executeOutput",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConsensus",
      "outputs": [
        {
          "internalType": "contract IConsensus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTemplateHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConsensus",
          "name": "newConsensus",
          "type": "address"
        }
      ],
      "name": "migrateToConsensus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "output",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "outputIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32[]",
              "name": "outputHashesSiblings",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct OutputValidityProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "validateOutput",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "outputHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "outputIndex",
              "type": "uint64"
            },
            {
              "internalType": "bytes32[]",
              "name": "outputHashesSiblings",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct OutputValidityProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "validateOutputHash",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "outputIndex",
          "type": "uint256"
        }
      ],
      "name": "wasOutputExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "errors": {
      "InvalidOutputHashesSiblingsArrayLength()": [
        {
          "details": "Please consult `CanonicalMachine` for the maximum number of outputs."
        }
      ],
      "OutputNotExecutable(bytes)": [
        {
          "params": {
            "output": "The output"
          }
        }
      ],
      "OutputNotReexecutable(bytes)": [
        {
          "params": {
            "output": "The output"
          }
        }
      ]
    },
    "events": {
      "NewConsensus(address)": {
        "params": {
          "newConsensus": "The new consensus"
        }
      },
      "OutputExecuted(uint64,bytes)": {
        "params": {
          "output": "The output",
          "outputIndex": "The index of the output"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeOutput(bytes,(uint64,bytes32[]))": {
        "details": "On a successful execution, emits a `OutputExecuted` event.May raise any of the errors raised by `validateOutput`, as well as `OutputNotExecutable` and `OutputNotReexecutable`.",
        "params": {
          "output": "The output",
          "proof": "The proof used to validate the output against              a claim submitted to the current consensus contract"
        }
      },
      "getConsensus()": {
        "returns": {
          "_0": "The current consensus"
        }
      },
      "getTemplateHash()": {
        "returns": {
          "_0": "The application's template hash"
        }
      },
      "migrateToConsensus(address)": {
        "details": "Can only be called by the application owner.",
        "params": {
          "newConsensus": "The new consensus"
        }
      },
      "validateOutput(bytes,(uint64,bytes32[]))": {
        "details": "May raise any of the errors raised by `validateOutputHash`.",
        "params": {
          "output": "The output",
          "proof": "The proof used to validate the output against              a claim submitted to the current consensus contract"
        }
      },
      "validateOutputHash(bytes32,(uint64,bytes32[]))": {
        "details": "May raise `InvalidOutputHashesSiblingsArrayLength` or `ClaimNotAccepted`.",
        "params": {
          "outputHash": "The output hash",
          "proof": "The proof used to validate the output against              a claim submitted to the current consensus contract"
        }
      },
      "wasOutputExecuted(uint256)": {
        "params": {
          "outputIndex": "The index of output"
        },
        "returns": {
          "_0": "Whether the output has been executed before"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ClaimNotAccepted(bytes32)": [
        {
          "notice": "Raised when the required claim was not accepted by the current consensus."
        }
      ],
      "InvalidOutputHashesSiblingsArrayLength()": [
        {
          "notice": "Raised when the output hashes siblings array has an invalid size."
        }
      ],
      "OutputNotExecutable(bytes)": [
        {
          "notice": "Could not execute an output, because the application contract doesn't know how to."
        }
      ],
      "OutputNotReexecutable(bytes)": [
        {
          "notice": "Could not execute an output, because it was already executed."
        }
      ]
    },
    "events": {
      "NewConsensus(address)": {
        "notice": "MUST trigger when a new consensus is chosen."
      },
      "OutputExecuted(uint64,bytes)": {
        "notice": "MUST trigger when an output is executed."
      }
    },
    "kind": "user",
    "methods": {
      "executeOutput(bytes,(uint64,bytes32[]))": {
        "notice": "Execute an output."
      },
      "getConsensus()": {
        "notice": "Get the current consensus."
      },
      "getTemplateHash()": {
        "notice": "Get the application's template hash."
      },
      "migrateToConsensus(address)": {
        "notice": "Migrate the application to a new consensus."
      },
      "validateOutput(bytes,(uint64,bytes32[]))": {
        "notice": "Validate an output."
      },
      "validateOutputHash(bytes32,(uint64,bytes32[]))": {
        "notice": "Validate an output hash."
      },
      "wasOutputExecuted(uint256)": {
        "notice": "Check whether an output has been executed."
      }
    },
    "notice": "The base layer incarnation of an application running on the execution layer.The state of the application advances through inputs sent to an `IInputBox` contract.These inputs can be sent either directly, or indirectly through portals.Reader nodes can retrieve inputs sent to the `IInputBox` contract through events, and feed them into the machine.Validator nodes can also submit claims to the `IConsensus` contract (see the `getConsensus` function).Once accepted, claims can be used to validate outputs generated by the machine.Some outputs are executable, which means they can have on-chain side effects.Every application is subscribed to some consensus, and may be governed by some owner. The consensus has the power to accept claims, which, in turn, are used to validate outputs. Meanwhile, the owner can replace the consensus at any time. Therefore, the users of an application must trust both the consensus and the application owner.There are several ownership models to choose from: - no owner (address zero) - individual signer (externally-owned account) - multiple signers (multi-sig) - DAO (decentralized autonomous organization) - self-owned application (off-chain governance logic)See `IConsensus` for examples of consensus models.",
    "version": 1
  },
  "evm": {
    "gasEstimates": null,
    "methodIdentifiers": {
      "executeOutput(bytes,(uint64,bytes32[]))": "33137b76",
      "getConsensus()": "179e740b",
      "getTemplateHash()": "61b12c66",
      "migrateToConsensus(address)": "fc411683",
      "owner()": "8da5cb5b",
      "renounceOwnership()": "715018a6",
      "transferOwnership(address)": "f2fde38b",
      "validateOutput(bytes,(uint64,bytes32[]))": "e88d39c0",
      "validateOutputHash(bytes32,(uint64,bytes32[]))": "08eb89ab",
      "wasOutputExecuted(uint256)": "71891db0"
    }
  }
}