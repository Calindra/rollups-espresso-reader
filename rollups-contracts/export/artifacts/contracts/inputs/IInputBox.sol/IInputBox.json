{
  "contractName": "IInputBox",
  "sourceName": "contracts/inputs/IInputBox.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxInputLength",
          "type": "uint256"
        }
      ],
      "name": "InputTooLarge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "InputAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "addInput",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getInputHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        }
      ],
      "name": "getNumberOfInputs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "errors": {
      "InputTooLarge(address,uint256,uint256)": [
        {
          "params": {
            "appContract": "The application contract address",
            "inputLength": "The input length",
            "maxInputLength": "The maximum input length"
          }
        }
      ]
    },
    "events": {
      "InputAdded(address,uint256,bytes)": {
        "params": {
          "appContract": "The application contract address",
          "index": "The input index",
          "input": "The input blob"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addInput(address,bytes)": {
        "details": "MUST fire an `InputAdded` event.",
        "params": {
          "appContract": "The application contract address",
          "payload": "The input payload"
        },
        "returns": {
          "_0": "The hash of the input blob"
        }
      },
      "getInputHash(address,uint256)": {
        "details": "The provided index must be valid.",
        "params": {
          "appContract": "The application contract address",
          "index": "The input index"
        }
      },
      "getNumberOfInputs(address)": {
        "params": {
          "appContract": "The application contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InputTooLarge(address,uint256,uint256)": [
        {
          "notice": "Input is too large."
        }
      ]
    },
    "events": {
      "InputAdded(address,uint256,bytes)": {
        "notice": "MUST trigger when an input is added."
      }
    },
    "kind": "user",
    "methods": {
      "addInput(address,bytes)": {
        "notice": "Send an input to an application."
      },
      "getInputHash(address,uint256)": {
        "notice": "Get the hash of an input in an application's input box."
      },
      "getNumberOfInputs(address)": {
        "notice": "Get the number of inputs sent to an application."
      }
    },
    "notice": "Provides data availability of inputs for applications.Each application has its own append-only list of inputs.Off-chain, inputs can be retrieved via events.On-chain, only the input hashes are stored.See `LibInput` for more details on how such hashes are computed.",
    "version": 1
  },
  "evm": {
    "gasEstimates": null,
    "methodIdentifiers": {
      "addInput(address,bytes)": "1789cd63",
      "getInputHash(address,uint256)": "677087c9",
      "getNumberOfInputs(address)": "61a93c87"
    }
  }
}