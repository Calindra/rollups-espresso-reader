{
  "contractName": "AbstractConsensus",
  "sourceName": "contracts/consensus/AbstractConsensus.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastProcessedBlockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "claim",
          "type": "bytes32"
        }
      ],
      "name": "ClaimAcceptance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "submitter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastProcessedBlockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "claim",
          "type": "bytes32"
        }
      ],
      "name": "ClaimSubmission",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getEpochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastProcessedBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "claim",
          "type": "bytes32"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "appContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "claim",
          "type": "bytes32"
        }
      ],
      "name": "wasClaimAccepted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "This contract was designed to be inherited by implementations of the `IConsensus` interface that only need a simple mechanism of storage and retrieval of accepted claims.",
    "events": {
      "ClaimAcceptance(address,uint256,bytes32)": {
        "params": {
          "appContract": "The application contract address",
          "claim": "The root of the Merkle tree of outputs",
          "lastProcessedBlockNumber": "The number of the last processed block"
        }
      },
      "ClaimSubmission(address,address,uint256,bytes32)": {
        "params": {
          "appContract": "The application contract address",
          "claim": "The root of the Merkle tree of outputs",
          "lastProcessedBlockNumber": "The number of the last processed block",
          "submitter": "The submitter address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Reverts if the epoch length is zero.",
        "params": {
          "epochLength": "The epoch length"
        }
      },
      "getEpochLength()": {
        "details": "The epoch number of a block is defined as the integer division of the block number by the epoch length."
      },
      "submitClaim(address,uint256,bytes32)": {
        "details": "MUST fire a `ClaimSubmission` event.MAY fire a `ClaimAcceptance` event, if the acceptance criteria is met.",
        "params": {
          "appContract": "The application contract address",
          "claim": "The root of the Merkle tree of outputs",
          "lastProcessedBlockNumber": "The number of the last processed block"
        }
      },
      "wasClaimAccepted(address,bytes32)": {
        "params": {
          "appContract": "The application contract address",
          "claim": "The root of the Merkle tree of outputs"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimAcceptance(address,uint256,bytes32)": {
        "notice": "MUST trigger when a claim is accepted."
      },
      "ClaimSubmission(address,address,uint256,bytes32)": {
        "notice": "MUST trigger when a claim is submitted."
      }
    },
    "kind": "user",
    "methods": {
      "getEpochLength()": {
        "notice": "Get the epoch length, in number of base layer blocks."
      },
      "submitClaim(address,uint256,bytes32)": {
        "notice": "Submit a claim to the consensus."
      },
      "wasClaimAccepted(address,bytes32)": {
        "notice": "Check if an output Merkle root hash was ever accepted by the consensus for a particular application."
      }
    },
    "notice": "Stores accepted claims for several applications.",
    "version": 1
  },
  "evm": {
    "gasEstimates": null,
    "methodIdentifiers": {
      "getEpochLength()": "cfe8a73b",
      "submitClaim(address,uint256,bytes32)": "6470af00",
      "wasClaimAccepted(address,bytes32)": "9618f35b"
    }
  }
}