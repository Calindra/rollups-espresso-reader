{
  "contractName": "LibMerkle32",
  "sourceName": "contracts/library/LibMerkle32.sol",
  "abi": [],
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062b2aec1146df13ef43ef0d132169893ccb26957faaf306745a5b0c78f78ee9b64736f6c63430008170033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062b2aec1146df13ef43ef0d132169893ccb26957faaf306745a5b0c78f78ee9b64736f6c63430008170033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Merkle library for trees of 32-byte leaves",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This library is meant for creating and verifying Merkle proofs.Each Merkle tree is assumed to have `2^height` leaves.Nodes are concatenated pairwise and hashed with `keccak256`.Siblings are in bottom-up order, from leaf to root.",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "103",
        "totalCost": "17303"
      },
      "internal": {
        "at(bytes32[] memory,uint256,bytes32)": "infinite",
        "merkleRoot(bytes32[] memory,uint256)": "infinite",
        "merkleRootAfterReplacement(bytes32[] calldata,uint256,bytes32)": "infinite",
        "parent(bytes32,bytes32)": "infinite",
        "parentLevel(bytes32[] memory,bytes32)": "infinite",
        "siblings(bytes32[] memory,uint256,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}