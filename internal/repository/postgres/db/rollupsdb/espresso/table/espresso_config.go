//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EspressoConfig = newEspressoConfigTable("espresso", "espresso_config", "")

type espressoConfigTable struct {
	postgres.Table

	// Columns
	ApplicationAddress postgres.ColumnString
	StartingBlock      postgres.ColumnFloat
	Namespace          postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EspressoConfigTable struct {
	espressoConfigTable

	EXCLUDED espressoConfigTable
}

// AS creates new EspressoConfigTable with assigned alias
func (a EspressoConfigTable) AS(alias string) *EspressoConfigTable {
	return newEspressoConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EspressoConfigTable with assigned schema name
func (a EspressoConfigTable) FromSchema(schemaName string) *EspressoConfigTable {
	return newEspressoConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EspressoConfigTable with assigned table prefix
func (a EspressoConfigTable) WithPrefix(prefix string) *EspressoConfigTable {
	return newEspressoConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EspressoConfigTable with assigned table suffix
func (a EspressoConfigTable) WithSuffix(suffix string) *EspressoConfigTable {
	return newEspressoConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEspressoConfigTable(schemaName, tableName, alias string) *EspressoConfigTable {
	return &EspressoConfigTable{
		espressoConfigTable: newEspressoConfigTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newEspressoConfigTableImpl("", "excluded", ""),
	}
}

func newEspressoConfigTableImpl(schemaName, tableName, alias string) espressoConfigTable {
	var (
		ApplicationAddressColumn = postgres.StringColumn("application_address")
		StartingBlockColumn      = postgres.FloatColumn("starting_block")
		NamespaceColumn          = postgres.FloatColumn("namespace")
		allColumns               = postgres.ColumnList{ApplicationAddressColumn, StartingBlockColumn, NamespaceColumn}
		mutableColumns           = postgres.ColumnList{StartingBlockColumn, NamespaceColumn}
	)

	return espressoConfigTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApplicationAddress: ApplicationAddressColumn,
		StartingBlock:      StartingBlockColumn,
		Namespace:          NamespaceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
